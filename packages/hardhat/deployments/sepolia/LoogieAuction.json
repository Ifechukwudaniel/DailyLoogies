{
  "address": "0xAaf9f3DF2da0BD047872a57659e49a75045318B8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loogie",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "extended",
          "type": "bool"
        }
      ],
      "name": "AuctionBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loogieId",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimeBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleCurrentAndCreateNewAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8a5626e024a9fc71eb920fddc9d4d20434500346d31b66a37a1cda60a73df0a",
  "receipt": {
    "to": null,
    "from": "0x0Fa85d42B92aa0BA788951F7EA9807Bc4Bc72111",
    "contractAddress": "0xAaf9f3DF2da0BD047872a57659e49a75045318B8",
    "transactionIndex": 81,
    "gasUsed": "1110367",
    "logsBloom": "0x
    "blockHash": "0xba9e43a64419e4dee24bf52228f82e43acd3c3556c74e2a4897be2b4ec388082",
    "transactionHash": "0xe8a5626e024a9fc71eb920fddc9d4d20434500346d31b66a37a1cda60a73df0a",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 5539168,
        "transactionHash": "0xe8a5626e024a9fc71eb920fddc9d4d20434500346d31b66a37a1cda60a73df0a",
        "address": "0xAaf9f3DF2da0BD047872a57659e49a75045318B8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000fa85d42b92aa0ba788951f7ea9807bc4bc72111"
        ],
        "data": "0x",
        "logIndex": 265,
        "blockHash": "0xba9e43a64419e4dee24bf52228f82e43acd3c3556c74e2a4897be2b4ec388082"
      }
    ],
    "blockNumber": 5539168,
    "cumulativeGasUsed": "24880078",
    "status": 1,
    "byzantium": true
  },
  "args": [
    86400,
    3600,
    5,
    "0xf7d541135a61b54BD2F79acD7cB1b2223dC9EB8F",
    "0xfC6B3408B12A9c1306c86759A289e41aB6e456d5"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e8abd581b2794d066d656e2bd3e08a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loogie\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loogieId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentAndCreateNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBid(uint256)\":{\"details\":\"This contract only accepts payment in ETH.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"This function can only be called by the owner when the contract is unpaused. While no new auctions can be started when paused, anyone can settle an ongoing auction.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTimeBuffer(uint256)\":{\"details\":\"Only callable by the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"This function can only be called by the owner when the contract is paused. If required, this function will start a new auction.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBid(uint256)\":{\"notice\":\"Create a bid for a Loogie, with a given amount.\"},\"pause()\":{\"notice\":\"Pause the Loogie auction house.\"},\"setTimeBuffer(uint256)\":{\"notice\":\"Set the auction time buffer.\"},\"unpause()\":{\"notice\":\"Unpause the Loogie auction house.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoogieAuction.sol\":\"LoogieAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LoogieAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.0;\\n\\nimport { ILoogieAuction } from  \\\"./interface/ILoogieAuction.sol\\\";\\nimport { IWETH } from  \\\"./interface/IWeth.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { ILoogie } from \\\"./interface/ILoogie.sol\\\";\\n\\ncontract LoogieAuction  is ILoogieAuction,Pausable, ReentrancyGuard, Ownable {\\n\\n    ILoogie loogie;\\n\\n    ILoogieAuction.Auction public auction;\\n\\n    uint8 public minBidIncrementPercentage;\\n\\n    uint256 public timeBuffer;\\n     \\n    uint256 public duration;\\n\\n      // The address of the WETH contract\\n    address public weth;\\n\\n      // all funds go to buidlguidl.eth\\n  address payable public constant recipient = payable(0xa81a6a910FeD20374361B35C451a4a44F86CeD46);\\n\\n\\n    constructor(uint256 _duration, uint256 _timeBuffer,  uint8 _minBidIncrementPercentage,  address _weth, address _loogie){\\n        duration = _duration;\\n        timeBuffer =_timeBuffer;\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\n        weth = _weth;\\n        loogie = ILoogie(_loogie);\\n    }\\n\\n    /**\\n     * @notice Pause the Loogie auction house.\\n     * @dev This function can only be called by the owner when the\\n     * contract is unpaused. While no new auctions can be started when paused,\\n     * anyone can settle an ongoing auction.\\n    */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the Loogie auction house.\\n     * @dev This function can only be called by the owner when the\\n     * contract is paused. If required, this function will start a new auction.\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n\\n        if (auction.startTime == 0 || auction.settled) {\\n            _createAuction();\\n        }\\n    }\\n\\n    /**\\n    * @notice Set the auction time buffer.\\n    * @dev Only callable by the owner.\\n    */\\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\\n        timeBuffer = _timeBuffer;\\n\\n        emit AuctionTimeBufferUpdated(_timeBuffer);\\n    }\\n\\n\\n    /**\\n     * @notice Create a bid for a Loogie, with a given amount.\\n     * @dev This contract only accepts payment in ETH.\\n     */\\n\\n    function createBid(uint256 loogieId) external payable  nonReentrant {\\n        ILoogieAuction.Auction memory _auction = auction;\\n\\n        require(_auction.loogieId == loogieId, 'Loogie is not up for auction');\\n        require(block.timestamp < _auction.endTime, 'Auction expired');\\n        require(\\n            msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\\n            'Must send more than last bid by minBidIncrementPercentage amount'\\n        );\\n\\n        address payable lastBidder = _auction.bidder;\\n\\n        // Refund the last bidder, if applicable\\n        if (lastBidder != address(0)) {\\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\\n        }\\n\\n        auction.amount = msg.value;\\n        auction.bidder = payable(msg.sender);\\n\\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\\n        if (extended) {\\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\\n        }\\n\\n        emit AuctionBid(_auction.loogieId, msg.sender, msg.value, extended);\\n\\n        if (extended) {\\n            emit AuctionExtended(_auction.loogieId, _auction.endTime);\\n        }\\n    }\\n\\n    function settleAuction()   external override whenPaused nonReentrant {\\n         _settleAuction();\\n    }\\n\\n    function settleCurrentAndCreateNewAuction() external override whenPaused nonReentrant  {\\n       _settleAuction();\\n       _createAuction();\\n    }\\n\\n     /**\\n     * @notice Settle an auction, finalizing the bid and paying out to the owner.\\n     * @dev If there are no bids, the Noun is burned.\\n     */\\n    function _settleAuction() internal {\\n        ILoogieAuction.Auction memory _auction = auction;\\n\\n        require(_auction.startTime != 0, \\\"Auction hasn't begun\\\");\\n        require(!_auction.settled, 'Auction has already been settled');\\n        require(block.timestamp >= _auction.endTime, \\\"Auction hasn't completed\\\");\\n\\n        auction.settled = true;\\n\\n        if (_auction.bidder == address(0)) {\\n            loogie.burnItem(_auction.loogieId);\\n        } else {\\n            loogie.transferFrom(address(this), _auction.bidder, _auction.loogieId);\\n        }\\n\\n        if (_auction.amount > 0) {\\n            _safeTransferETHWithFallback(recipient, _auction.amount);\\n        }\\n\\n        emit AuctionSettled(_auction.loogieId, _auction.bidder, _auction.amount);\\n    }\\n\\n    \\n     /**\\n     * @notice Create an auction.\\n     * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\\n     * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\\n     * catch the revert and pause this contract.\\n     */\\n    function _createAuction() internal {\\n        try loogie.mintItem() returns (uint256 loogieId) {\\n            uint256 startTime = block.timestamp;\\n            uint256 endTime = startTime + duration;\\n\\n            auction = Auction( {\\n                loogieId: loogieId,\\n                amount: 0,\\n                startTime: startTime,\\n                endTime: endTime,\\n                bidder: payable(0),\\n                settled: false\\n            });\\n\\n            emit AuctionCreated(loogieId, startTime, endTime);\\n        } catch Error(string memory) {\\n            _pause();\\n        }\\n\\n    }\\n\\n\\n    /**\\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n     */\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n        if (!_safeTransferETH(to, amount)) {\\n            IWETH(weth).deposit{ value: amount }();\\n            IERC20(weth).transfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ETH and return the success status.\\n     * @dev This function only forwards 30,000 gas to the callee.\\n     */\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x35fb2dbb0ab606d9d5c42b1333bfcd04bb46e48f51c901d38ddf4802f6db5290\",\"license\":\"MIT\"},\"contracts/interface/ILoogie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface ILoogie is IERC721 {\\n    event MinterUpdated( address indexed minter);\\n    function mintItem() external returns (uint256);\\n    function burnItem(uint256 id) external;\\n    function setMinter(address minter) external;\\n    function getCurrentToken() external  view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe48e97a09366cb919a5a5650f7f7e17be936bfc5f8528b6e5b01de4c064d65a9\",\"license\":\"MIT\"},\"contracts/interface/ILoogieAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.0;\\n\\ninterface ILoogieAuction {\\n    struct Auction {\\n        uint256 loogieId;\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address payable bidder;\\n        bool settled;\\n    }\\n\\n    event AuctionCreated(uint256 indexed loogieId, uint256 startTime, uint256 endTime);\\n\\n    event AuctionBid(uint256 indexed loogieId, address indexed sender, uint256 value, bool extended);\\n\\n    event AuctionSettled(uint256 indexed loogieId, address winner, uint256 amount);\\n\\n    event AuctionExtended(uint256 indexed loogieId, uint256 endTime);\\n\\n    event AuctionTimeBufferUpdated(uint256 indexed timeBuffer);\\n    \\n    function createBid(uint256 loogieId) external payable;\\n\\n    function settleAuction() external;\\n\\n    function settleCurrentAndCreateNewAuction() external;\\n\\n     function pause() external;\\n\\n    function unpause() external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n    \\n}\\n\",\"keccak256\":\"0xea980be9cbfc7bced9aec0ed0aa0128b3c8981c873b7196ca47e1ebd8bca1c24\",\"license\":\"MIT\"},\"contracts/interface/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\",\"keccak256\":\"0x2bd966b21bfd61ffca70cb979634c52bb5abf3279ba030a1d12166dc563d7eb6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100fa57601f61114b38819003918201601f19168301916001600160401b038311848410176100ff5780849260a0946040528339810103126100fa57805190602081015191604082015160ff81168091036100fa5761006f608061006860608601610115565b9401610115565b9060ff19938460005416600055600180556002549160018060a01b03199533878516176002556040519760018060a01b03968795863391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600b55600a5560095416176009551683600c541617600c5516906003541617600355611021908161012a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100fa5756fe608060408181526004908136101561001657600080fd5b600092833560e01c9081630fb5a6b41461088a575080633f4ba83a1461080b5780633fc8cef3146107e25780635c975abb146107c0578063659dd2b41461043657806366d003ac146104075780637120334b146103c0578063715018a6146103635780637d9f6db51461030d5780638456cb591461027b5780638da5cb5b14610252578063a4d0a17e14610229578063b296024d14610207578063ec91f2a4146101e4578063f25efffc146101a95763f2fde38b146100d457600080fd5b346101a55760203660031901126101a5576001600160a01b038235818116939192908490036101a1576101056108a6565b831561014f575050600254826bffffffffffffffffffffffff60a01b821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b83346101e157806003193601126101e1576101c26108fe565b6101ca6109ee565b6101d2610a44565b6101da610e1b565b6001805580f35b80fd5b838234610203578160031936011261020357602090600a549051908152f35b5080fd5b83823461020357816003193601126102035760209060ff600954169051908152f35b83346101e157806003193601126101e1576102426108fe565b61024a6109ee565b6101da610a44565b83823461020357816003193601126102035760025490516001600160a01b039091168152602090f35b5090346101a557826003193601126101a5576102956108a6565b82549060ff82166102d7575060ff19166001178255513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b606490602084519162461bcd60e51b8352820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152fd5b5082346101e157806003193601126101e1575060ff60c092549160055490600654600754916008549381519687526020870152850152606084015260018060a01b038116608084015260a01c16151560a0820152f35b83346101e157806003193601126101e15761037c6108a6565b600280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461020357602036600319011261020357356103dc6108a6565b80600a557f1b55d9f7002bda4490f467e326f22a4a847629c0f2d1ed421607d318d25b410d8280a280f35b8382346102035781600319360112610203576020905173a81a6a910fed20374361b35c451a4a44f86ced468152f35b506020806003193601126107bc5761044c6109ee565b81519161045883610947565b8354938484526005549483850195865260065483860152600754956060860196875260085491608087019060ff60018060a01b0394858116845260a01c16151560a089015284350361077957875142101561074457815160ff60095416808202908282041482151715610731579060646104d39204906109cb565b34106106ca5751821690816105b4575b50503460055550600880546001600160a01b031916331790558451428103919082116105a15750600a54809110908161058b575b50835182519034825282858301527f1159164c56f277e6fc99c11731bd380e0347deb969b75523398734c252706ea3843393a3610557575b846001805580f35b7f6e912a3a9105bdd2af817ba5adc14e6c127c1035b5b648faa29ca0d58ab8ff4e925193519051908152a23880808061054f565b61059590426109cb565b80865260075538610517565b634e487b7160e01b875260119052602486fd5b5188928986516105c38161098d565b52898080808587617530f13d156106c5573d6105de81610fcf565b906105eb895192836109a9565b81528b893d92013e5b15610600575b506104e3565b80600c54168a813b156101e157839187895180948193630d0e30db60e41b83525af180156106bb5790889392916106a7575b50604490600c541693858851958694859363a9059cbb60e01b85528a85015260248401525af1801561069d5761066a575b80806105fa565b8481813d8311610696575b61067f81836109a9565b810103126102035751801515036101e15780610663565b503d610675565b84513d84823e3d90fd5b6106b2919550610979565b89936044610632565b87513d8d823e3d90fd5b6105f4565b608484868881519262461bcd60e51b845283015260248201527f4d7573742073656e64206d6f7265207468616e206c617374206269642062792060448201527f6d696e426964496e6372656d656e7450657263656e7461676520616d6f756e746064820152fd5b634e487b7160e01b8b526011865260248bfd5b845162461bcd60e51b8152808501879052600f60248201526e105d58dd1a5bdb88195e1c1a5c9959608a1b6044820152606490fd5b845162461bcd60e51b8152808501879052601c60248201527f4c6f6f676965206973206e6f7420757020666f722061756374696f6e000000006044820152606490fd5b8380fd5b83823461020357816003193601126102035760ff602092541690519015158152f35b838234610203578160031936011261020357600c5490516001600160a01b039091168152602090f35b83823461020357816003193601126102035760207f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa916108496108a6565b6108516108fe565b835460ff1916845551338152a160065415801561087b575b6108705780f35b610878610e1b565b80f35b5060ff60085460a01c16610869565b849034610203578160031936011261020357602090600b548152f35b6002546001600160a01b031633036108ba57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff600054161561090b57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b60c0810190811067ffffffffffffffff82111761096357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161096357604052565b6020810190811067ffffffffffffffff82111761096357604052565b90601f8019910116810190811067ffffffffffffffff82111761096357604052565b919082018092116109d857565b634e487b7160e01b600052601160045260246000fd5b6002600154146109ff576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040908151610a5281610947565b60049283548252600554602080840191825260065480848601526007549460608101958652600854608082019660018060a01b0393848316895260a084019060ff8460a01c161515825215610d6f5751610d2e57514210610ceb5760ff60a01b1916600160a01b176008558551821680610c93575081600354168151813b15610c8e5760009060248b838a51958694859363576cc0f760e01b85528401525af18015610c8357610c74575b505b835180610b3f575b507fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d9995969750519551169151908351928352820152a2565b600098898751610b4e8161098d565b5273a81a6a910fed20374361b35c451a4a44f86ced46908a8080808686617530f13d15610c6f573d610b7f81610fcf565b90610b8c8b5192836109a9565b81528c883d92013e5b15610ba2575b5050610b07565b84600c54168b813b156101e1578491838b5180948193630d0e30db60e41b83525af18015610c6557610c4d575b5090604486928c87600c54168b51968795869463a9059cbb60e01b865285015260248401525af18015610c4357610c08575b8080610b9b565b8381813d8311610c3c575b610c1d81836109a9565b81010312610c38575180151503610c345787610c01565b8780fd5b8880fd5b503d610c13565b86513d8b823e3d90fd5b8692919b610c5c604492610979565b9b919250610bcf565b89513d8e823e3d90fd5b610b95565b610c7d90610979565b38610afd565b86513d6000823e3d90fd5b600080fd5b8260035416825191813b15610c8e5760648b600080948b5196879586946323b872dd60e01b86523090860152602485015260448401525af18015610c8357610cdc575b50610aff565b610ce590610979565b38610cd6565b855162461bcd60e51b8152808a01859052601860248201527f41756374696f6e206861736e277420636f6d706c6574656400000000000000006044820152606490fd5b60648a86808a519262461bcd60e51b845283015260248201527f41756374696f6e2068617320616c7265616479206265656e20736574746c65646044820152fd5b875162461bcd60e51b8152808c01879052601460248201527320bab1ba34b7b7103430b9b713ba103132b3bab760611b6044820152606490fd5b600060443d10610e0757604051600319913d83016004833e815167ffffffffffffffff918282113d602484011117610e0a57818401948551938411610e12573d85010160208487010111610e0a5750610e07929101602001906109a9565b90565b949350505050565b50949350505050565b60018060a01b03600354166040805163eb93406b60e01b81526020908181600481600080985af1849181610fa0575b50610f1457506001908360033d11610f04575b6308c379a014610e7b575b50610e71575050565b51903d90823e3d90fd5b610e83610da9565b15610e6857835484925060ff8116610ecd5760ff1916600117845582513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589190a138610e68565b835162461bcd60e51b815260048101839052601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b50600484803e835160e01c610e5d565b92907fd6eddd1118d71820909c1197aa966dbc15ed6f508554252169cc3d5ccac756ca9291610f45600b54426109cb565b908060a08551610f5481610947565b8881528286820152428782015284606082015282608082015201528560045560055542600655806007556affffffffffffffffffffff60a81b60085416600855825191428352820152a2565b9091508281813d8311610fc8575b610fb881836109a9565b810103126101a157519038610e4a565b503d610fae565b67ffffffffffffffff811161096357601f01601f19166020019056fea26469706673582212201c4ce6b41e789842e42d48236b4f0fb40957ff9ecc10c845126c6345b5e3368b64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBid(uint256)": {
        "details": "This contract only accepts payment in ETH."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "This function can only be called by the owner when the contract is unpaused. While no new auctions can be started when paused, anyone can settle an ongoing auction."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTimeBuffer(uint256)": {
        "details": "Only callable by the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "This function can only be called by the owner when the contract is paused. If required, this function will start a new auction."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBid(uint256)": {
        "notice": "Create a bid for a Loogie, with a given amount."
      },
      "pause()": {
        "notice": "Pause the Loogie auction house."
      },
      "setTimeBuffer(uint256)": {
        "notice": "Set the auction time buffer."
      },
      "unpause()": {
        "notice": "Unpause the Loogie auction house."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 540,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "loogie",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILoogie)1040"
      },
      {
        "astId": 543,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "auction",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Auction)1055_storage"
      },
      {
        "astId": 545,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "minBidIncrementPercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 547,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "timeBuffer",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 549,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "duration",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 551,
        "contract": "contracts/LoogieAuction.sol:LoogieAuction",
        "label": "weth",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILoogie)1040": {
        "encoding": "inplace",
        "label": "contract ILoogie",
        "numberOfBytes": "20"
      },
      "t_struct(Auction)1055_storage": {
        "encoding": "inplace",
        "label": "struct ILoogieAuction.Auction",
        "members": [
          {
            "astId": 1044,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "loogieId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1046,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1048,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1050,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1052,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "bidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 1054,
            "contract": "contracts/LoogieAuction.sol:LoogieAuction",
            "label": "settled",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}